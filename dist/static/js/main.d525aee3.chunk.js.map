{"version":3,"sources":["flow/index.tsx","reportWebVitals.ts","index.tsx"],"names":["Flow","state","graph","isModalVisible","currNode","editLabel","GraphContainer","initGraph","Graph","registerNode","inherit","attrs","body","strokeWidth","stroke","fill","rx","ry","portMarkup","tagName","selector","width","height","x","y","magnet","children","ns","Dom","xhtml","xmlns","style","registerConnector","source","target","v1","v2","container","grid","visible","onPortRendered","args","port","contentSelectors","content","ReactDOM","render","title","className","connected","highlighting","nodeAvailable","name","magnetAvailable","magnetAdsorbed","connecting","snap","allowBlank","allowLoop","highlight","sourceAnchor","dx","Platform","IS_SAFARI","targetAnchor","connectionPoint","connector","createEdge","line","strokeDasharray","targetMarker","size","validateMagnet","getAttribute","validateConnection","sourceView","targetView","sourceMagnet","targetMagnet","portId","cell","getPort","setState","on","edge","node","currentCell","currentMagnet","setPortProp","attr","addNode","shape","label","ports","items","group","id","groups","in","position","zIndex","out","addEdge","removeEdge","RefContainer","HandleAddNode","values","form","nodeData","deleteNode","removeNode","EditLabelFinsh","nodes","getNodes","map","item","currLabel","handleCancel","this","layout","labelCol","span","wrapperCol","ref","onFinish","validateMessages","required","types","email","number","range","Item","rules","type","min","max","offset","htmlType","footer","onCancel","placeholder","danger","onClick","Component","insertCss","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d525aee3.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport insertCss from 'insert-css'\r\nimport { Tooltip, Button, Form, Input, InputNumber, Modal } from 'antd'\r\nimport { Graph, Node, Platform, Dom } from '@antv/x6'\r\n\r\nimport './index.less'\r\n\r\nclass Flow extends Component {\r\n  state = {\r\n    graph: null,\r\n    isModalVisible: false,\r\n    currNode: null,\r\n    editLabel: ''\r\n  }\r\n\r\n  private GraphContainer!: HTMLDivElement\r\n\r\n  private initGraph = (): void => {\r\n\r\n    // 定义节点\r\n    Graph.registerNode(\r\n      'algo-node',\r\n      {\r\n        inherit: 'rect',\r\n        attrs: {\r\n          body: {\r\n            strokeWidth: 1,\r\n            stroke: '#108ee9',\r\n            fill: '#fff',\r\n            rx: 15,\r\n            ry: 15,\r\n          },\r\n        },\r\n        portMarkup: [\r\n          {\r\n            tagName: 'foreignObject',\r\n            selector: 'fo',\r\n            attrs: {\r\n              width: 10,\r\n              height: 10,\r\n              x: -5,\r\n              y: -5,\r\n              magnet: 'true',\r\n            },\r\n            children: [\r\n              {\r\n                ns: Dom.ns.xhtml,\r\n                tagName: 'body',\r\n                selector: 'foBody',\r\n                attrs: {\r\n                  xmlns: Dom.ns.xhtml,\r\n                },\r\n                style: {\r\n                  width: '100%',\r\n                  height: '100%',\r\n                },\r\n                children: [\r\n                  {\r\n                    tagName: 'div',\r\n                    selector: 'content',\r\n                    style: {\r\n                      width: '100%',\r\n                      height: '100%',\r\n                    },\r\n                  },\r\n                ],\r\n              },\r\n            ],\r\n          },\r\n        ],\r\n      },\r\n      true,\r\n    )\r\n\r\n    // 定义边\r\n    Graph.registerConnector(\r\n      'algo-edge',\r\n      (source, target) => {\r\n        const offset = 4\r\n        const control = 80\r\n        const v1 = { x: source.x, y: source.y + offset + control }\r\n        const v2 = { x: target.x, y: target.y - offset - control }\r\n\r\n        return `M ${source.x} ${source.y}\r\n          L ${source.x} ${source.y + offset}\r\n          C ${v1.x} ${v1.y} ${v2.x} ${v2.y} ${target.x} ${target.y - offset}\r\n          L ${target.x} ${target.y}\r\n          `\r\n      },\r\n      true,\r\n    )\r\n\r\n    const graph = new Graph({\r\n      container: this.GraphContainer,\r\n      grid: {\r\n        visible: true\r\n      },\r\n      onPortRendered(args) {\r\n        const port:any = args.port\r\n        const contentSelectors:any = args.contentSelectors\r\n        const container = contentSelectors && contentSelectors.content\r\n        if (container) {\r\n          ReactDOM.render(\r\n            <Tooltip title=\"port\">\r\n              <div className={`my-port${port.connected ? ' connected' : ''}`} />\r\n            </Tooltip>,\r\n            container,\r\n          )\r\n        }   \r\n      },\r\n      highlighting: {\r\n        nodeAvailable: {\r\n          name: 'className',\r\n          args: {\r\n            className: 'available',\r\n          },\r\n        },\r\n        magnetAvailable: {\r\n          name: 'className',\r\n          args: {\r\n            className: 'available',\r\n          },\r\n        },\r\n        magnetAdsorbed: {\r\n          name: 'className',\r\n          args: {\r\n            className: 'adsorbed',\r\n          },\r\n        },\r\n      },\r\n      connecting: {\r\n        snap: true,\r\n        allowBlank: false,\r\n        allowLoop: false,\r\n        highlight: true,\r\n        sourceAnchor: {\r\n          name: 'bottom',\r\n          args: {\r\n            dx: Platform.IS_SAFARI ? 5 : 0,\r\n          },\r\n        },\r\n        targetAnchor: {\r\n          name: 'center',\r\n          args: {\r\n            dx: Platform.IS_SAFARI ? 5 : 0,\r\n          },\r\n        },\r\n        connectionPoint: 'anchor',\r\n        connector: 'algo-edge',\r\n        createEdge() {\r\n          return graph.createEdge({\r\n            attrs: {\r\n              line: {\r\n                strokeDasharray: '5 5',\r\n                stroke: '#808080',\r\n                strokeWidth: 1,\r\n                targetMarker: {\r\n                  name: 'block',\r\n                  args: {\r\n                    size: '6',\r\n                  },\r\n                },\r\n              },\r\n            },\r\n          })\r\n        },\r\n        validateMagnet({ magnet }) {\r\n          return magnet.getAttribute('port-group') !== 'in'\r\n        },\r\n        validateConnection({ sourceView, targetView, sourceMagnet, targetMagnet }) {\r\n          // 只能从输出链接桩创建连接\r\n          if (!sourceMagnet || sourceMagnet.getAttribute('port-group') === 'in') {\r\n            return false\r\n          }\r\n    \r\n          // 只能连接到输入链接桩\r\n          if (!targetMagnet || targetMagnet.getAttribute('port-group') !== 'in') {\r\n            return false\r\n          }\r\n    \r\n          // 判断目标链接桩是否可连接\r\n          const portId = targetMagnet.getAttribute('port')!\r\n          const node = targetView.cell as Node\r\n          const port = node.getPort(portId)\r\n          if (port && port.connected) {\r\n            return false\r\n          }\r\n    \r\n          return true\r\n        },\r\n      }\r\n    })\r\n    this.setState({graph}, () => {\r\n\r\n      graph.on('edge:connected', (args) => {\r\n        const edge = args.edge\r\n        const node = args.currentCell as Node\r\n        const elem = args.currentMagnet as HTMLElement\r\n        const portId = elem.getAttribute('port') as string\r\n      \r\n        // 触发 port 重新渲染\r\n        node.setPortProp(portId, 'connected', true)\r\n      \r\n        // 更新连线样式\r\n        edge.attr({\r\n          line: {\r\n            strokeDasharray: '',\r\n            targetMarker: '',\r\n          },\r\n        })\r\n      })\r\n      \r\n      graph.addNode({\r\n        node: 1,\r\n        x: 380,\r\n        y: 180,\r\n        width: 160,\r\n        height: 30,\r\n        shape: 'algo-node',\r\n        label: '归一化',\r\n        ports: {\r\n          items: [\r\n            { group: 'in', id: 'in1' },\r\n            { group: 'in', id: 'in2' },\r\n            { group: 'out', id: 'out1' },\r\n            { group: 'out', id: 'out2' },\r\n          ],\r\n          groups: {\r\n            in: {\r\n              position: { name: 'top' },\r\n              zIndex: 1,\r\n            },\r\n            out: {\r\n              position: { name: 'bottom' },\r\n              zIndex: 1,\r\n            },\r\n          },\r\n        },\r\n      })\r\n      \r\n      const source = graph.addNode({\r\n        node: 2,\r\n        x: 200,\r\n        y: 50,\r\n        width: 160,\r\n        height: 30,\r\n        shape: 'algo-node',\r\n        label: 'SQL',\r\n        ports: {\r\n          items: [\r\n            { group: 'in', id: 'in1' },\r\n            { group: 'in', id: 'in2' },\r\n            { group: 'out', id: 'out1' },\r\n          ],\r\n          groups: {\r\n            in: {\r\n              position: { name: 'top' },\r\n              zIndex: 1,\r\n            },\r\n            out: {\r\n              position: { name: 'bottom' },\r\n              zIndex: 1,\r\n            },\r\n          },\r\n        },\r\n      })\r\n      \r\n      const target = graph.addNode({\r\n        node: 3,\r\n        x: 120,\r\n        y: 260,\r\n        width: 160,\r\n        height: 30,\r\n        shape: 'algo-node',\r\n        label: '序列化',\r\n        ports: {\r\n          items: [\r\n            { group: 'in', id: 'in1', connected: true },\r\n            { group: 'in', id: 'in2' },\r\n            { group: 'out', id: 'out1' },\r\n          ],\r\n          groups: {\r\n            in: {\r\n              position: { name: 'top' },\r\n              zIndex: 1,\r\n            },\r\n            out: {\r\n              position: { name: 'bottom' },\r\n              zIndex: 1,\r\n            },\r\n          },\r\n        },\r\n      })\r\n      \r\n      graph.addNode({\r\n        node: 4,\r\n        x: 420,\r\n        y: 260,\r\n        width: 160,\r\n        height: 30,\r\n        shape: 'algo-node',\r\n        label: '序列化2',\r\n        ports: {\r\n          items: [\r\n            { group: 'in', id: 'in1' },\r\n            { group: 'in', id: 'in2' },\r\n            { group: 'out', id: 'out1' },\r\n          ],\r\n          groups: {\r\n            in: {\r\n              position: { name: 'top' },\r\n              zIndex: 1,\r\n            },\r\n            out: {\r\n              position: { name: 'bottom' },\r\n              zIndex: 1,\r\n            },\r\n          },\r\n        },\r\n      })\r\n      \r\n      graph.addEdge({\r\n        source: { cell: source, port: 'out1' },\r\n        target: { cell: target, port: 'in1' },\r\n        attrs: {\r\n          line: {\r\n            stroke: '#808080',\r\n            strokeWidth: 1,\r\n            targetMarker: '',\r\n          },\r\n        },\r\n      })\r\n\r\n      graph.on('node:dblclick', ({ node }) => {\r\n        this.setState({isModalVisible: true, currNode: node})\r\n      })\r\n\r\n      graph.on('edge:dblclick', ({ edge }) => {\r\n        graph.removeEdge(edge)\r\n      })\r\n      \r\n    })\r\n  }\r\n\r\n  private RefContainer = (container: HTMLDivElement) => {\r\n    this.GraphContainer = container\r\n  }\r\n\r\n  private HandleAddNode = (values: any) => {\r\n    const { graph } = this.state\r\n    const { label, x, y } = values.form\r\n    const nodeData = {\r\n      node: 5,\r\n      x,\r\n      y,\r\n      label,\r\n      shape: 'algo-node',\r\n      width: 160,\r\n      height: 30,\r\n      ports: {\r\n        items: [\r\n          { group: 'in', id: 'in1' },\r\n          { group: 'in', id: 'in2' },\r\n          { group: 'out', id: 'out1' },\r\n          { group: 'out', id: 'out2' },\r\n        ],\r\n        groups: {\r\n          in: {\r\n            position: { name: 'top' },\r\n            zIndex: 1,\r\n          },\r\n          out: {\r\n            position: { name: 'bottom' },\r\n            zIndex: 1,\r\n          },\r\n        },\r\n      }\r\n    }\r\n    graph.addNode(nodeData)\r\n  }\r\n\r\n  private deleteNode = () => {\r\n    const {graph, currNode} = this.state\r\n    this.setState({isModalVisible: false}, () => {\r\n      graph.removeNode(currNode)\r\n    })\r\n  }\r\n\r\n  private EditLabelFinsh = (values: any) => {\r\n    const { graph, currNode } = this.state\r\n    let nodes = graph.getNodes()\r\n    nodes = nodes.map((item: any) => {\r\n      item === currNode && (item.label = values.currLabel)\r\n      return item\r\n    })\r\n    this.setState({isModalVisible: false})\r\n  }\r\n\r\n  private handleCancel = () => {\r\n    this.setState({isModalVisible: false})\r\n  }\r\n\r\n  componentDidMount () {\r\n    this.initGraph()\r\n  }\r\n\r\n  render() {\r\n\r\n    const { isModalVisible } = this.state\r\n\r\n    const layout = {labelCol: { span: 8 }, wrapperCol: { span: 12 }}\r\n\r\n    /* eslint-disable no-template-curly-in-string */\r\n    const validateMessages = {\r\n      required: '${label} is required!',\r\n      types: {\r\n        email: '${label} is not a valid email!',\r\n        number: '${label} is not a valid number!',\r\n      },\r\n      number: {\r\n        range: '${label} must be between ${min} and ${max}',\r\n      },\r\n    }\r\n    /* eslint-enable no-template-curly-in-string */\r\n\r\n    return <div className='Flow'>\r\n      <div ref={this.RefContainer} className='container'></div>\r\n      <div className='edit-box'>\r\n        <Form {...layout} name=\"nest-messages\" onFinish={this.HandleAddNode} validateMessages={validateMessages}>\r\n          <Form.Item name={['form', 'label']} label=\"内容\" rules={[{ required: true }]}>\r\n            <Input />\r\n          </Form.Item>\r\n          <Form.Item name={['form', 'x']} label=\"x轴坐标\" rules={[{ type: 'number', min: 0, max: 800 }]}>\r\n            <InputNumber />\r\n          </Form.Item>\r\n          <Form.Item name={['form', 'y']} label=\"y轴坐标\" rules={[{ type: 'number', min: 0, max: 600 }]}>\r\n            <InputNumber />\r\n          </Form.Item>\r\n          <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\r\n            <Button type=\"primary\" htmlType=\"submit\"> 新增节点 </Button>\r\n          </Form.Item>\r\n        </Form>\r\n        <Modal title=\"Basic Modal\" visible={isModalVisible} footer={null} onCancel={this.handleCancel}>\r\n          <Form onFinish={this.EditLabelFinsh}>\r\n            <Form.Item label=\"修改内容\" name='currLabel' rules={[{ required: true }]}>\r\n              <Input placeholder='请输入要修改的内容'  />\r\n            </Form.Item>\r\n            <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\r\n              <Button type=\"primary\" htmlType=\"submit\"> 修改 </Button>\r\n              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n              <Button type=\"primary\" danger onClick={this.deleteNode}> 删除节点 </Button>\r\n            </Form.Item>\r\n          </Form>\r\n        </Modal>\r\n      </div>\r\n    </div>\r\n  }\r\n}\r\n\r\ninsertCss(`\r\n.x6-node [magnet=\"true\"] {\r\n  cursor: crosshair;\r\n  transition: none;\r\n}\r\n\r\n.x6-node [magnet=\"true\"]:hover {\r\n  opacity: 1;\r\n}\r\n\r\n.x6-node [magnet=\"true\"][port-group=\"in\"] {\r\n  cursor: move;\r\n}\r\n\r\n.my-port {\r\n  width: 100%;\r\n  height: 100%;\r\n  border: 1px solid #808080;\r\n  border-radius: 100%;\r\n  background: #eee;\r\n}\r\n\r\n.my-port.connected {\r\n  width: 0;\r\n  height: 0;\r\n  margin-top: 5px;\r\n  margin-left: 1px;\r\n  border-width: 5px 4px 0;\r\n  border-style: solid;\r\n  border-color: #808080 transparent transparent;\r\n  border-radius: 0;\r\n  background-color: transparent;\r\n}\r\n\r\n.x6-port-body.available {\r\n  overflow: visible;\r\n}\r\n\r\n.x6-port-body.available body {\r\n  overflow: visible;\r\n}\r\n\r\n.x6-port-body.available body > div::before {\r\n  content: \" \";\r\n  float: left;\r\n  width: 20px;\r\n  height: 20px;\r\n  margin-top: -5px;\r\n  margin-left: -5px;\r\n  border-radius: 50%;\r\n  background-color: rgba(57, 202, 116, 0.6);\r\n  box-sizing: border-box;\r\n}\r\n\r\n.x6-port-body.available body > div::after {\r\n  content: \" \";\r\n  float: left;\r\n  clear: both;\r\n  width: 10px;\r\n  height: 10px;\r\n  margin-top: -15px;\r\n  border-radius: 50%;\r\n  background-color: #fff;\r\n  border: 1px solid #39ca74;\r\n  position: relative;\r\n  z-index: 10;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.x6-port-body.adsorbed {\r\n  overflow: visible;\r\n}\r\n\r\n.x6-port-body.adsorbed body {\r\n  overflow: visible;\r\n}\r\n\r\n.x6-port-body.adsorbed body > div::before {\r\n  content: \" \";\r\n  float: left;\r\n  width: 28px;\r\n  height: 28px;\r\n  margin-top: -9px;\r\n  margin-left: -9px;\r\n  border-radius: 50%;\r\n  background-color: rgba(57, 202, 116, 0.6);\r\n  box-sizing: border-box;\r\n}\r\n\r\n.x6-port-body.adsorbed body > div::after {\r\n  content: \" \";\r\n  float: left;\r\n  clear: both;\r\n  width: 10px;\r\n  height: 10px;\r\n  margin-top: -19px;\r\n  border-radius: 50%;\r\n  background-color: #fff;\r\n  border: 1px solid #39ca74;\r\n  position: relative;\r\n  z-index: 10;\r\n  box-sizing: border-box;\r\n}\r\n`)\r\n\r\nexport default Flow","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport Flow from './flow';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Flow />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}